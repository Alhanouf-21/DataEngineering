# -*- coding: utf-8 -*-
"""ProjectDE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ku3NAOQAtHzmLrf383V_-UEjmiRUgme1

# üß™ 1.Relational Database
Tables are created, and sample data is inserted to structure the e-commerce dataset. CRUD operations are performed using SQL and Python to manage the data, while indexing and query optimization techniques are applied to improve performance.
"""

# üìÅ Upload e-commerce.xlsx
from google.colab import files
uploaded = files.upload()

# üîå Connect to SQLite and create tables
import sqlite3
import pandas as pd

conn = sqlite3.connect("e-commerce.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS Invoice (
    InvoiceNo TEXT NOT NULL,
    StockCode TEXT NOT NULL,
    Description TEXT NOT NULL,
    Quantity INTEGER NOT NULL,
    InvoiceDate TEXT NOT NULL,
    UnitPrice REAL NOT NULL,
    CustomerID INTEGER,
    Country TEXT NOT NULL,
    PRIMARY KEY (InvoiceNo, StockCode)
)
""")


conn.commit()
print("‚úÖ Tables created")

# üì• Load Excel file
df = pd.read_excel("e-commerce.xlsx")

# üì§ Insert into Invoice table
df.to_sql("Invoice", conn, if_exists="replace", index=False)

print("‚úÖ Data inserted")

# üìã View tables BEFORE CRUD operations
print("üßæ Invoice Table BEFORE CRUD:")
for row in cursor.execute("SELECT * FROM Invoice LIMIT 5"):
    print(row)

# ‚úèÔ∏è UPDATE: Change Quantity of a specific Invoice line
cursor.execute("""
UPDATE Invoice
SET Quantity = 50
WHERE InvoiceNo = '536365' AND StockCode = '85123A'
""")
conn.commit()
print("‚úÖ Invoice updated")

# ‚ùå DELETE: Remove a specific invoice item
cursor.execute("""
DELETE FROM Invoice
WHERE InvoiceNo = '536365' AND StockCode = '84406B'
""")
conn.commit()
print("‚úÖ Invoice item deleted")

# üìã View table after remove and change operations
print("üßæ Invoice Table BEFORE CRUD:")
for row in cursor.execute("SELECT * FROM Invoice LIMIT 5"):
    print(row)

# ‚ûï INSERT: Add new invoice rows
new_rows = [
    ("99991", "T001", "Product A", 5, "20/1/2025 8:26", 3.99, 99901, "saudi arabia"),
    ("99991", "T002", "Product B", 2, "04/05/2025 8:26", 7.49, 99901, "sudan"),
    ("99992", "T003", "Product C", 1, "12/05/2025 8:26", 15.00, 99902, "Yemen")
]

cursor.executemany("""
INSERT INTO Invoice (InvoiceNo, StockCode, Description, Quantity, InvoiceDate, UnitPrice, CustomerID, Country) VALUES (?, ?, ?, ?, ?, ?, ?, ?)""", new_rows)
conn.commit()
print("‚úÖ New invoice rows added")

# üìã View table AFTER CRUD operations
print("\nüßæ Invoice Table AFTER CRUD:")
for row in cursor.execute("SELECT * FROM Invoice WHERE InvoiceNo IN ('99991', '99992')"):
    print(row)

# ‚è±Ô∏è Query performance test: select all invoices with high price
import time
start = time.time()
cursor.execute("SELECT * FROM Invoice WHERE UnitPrice > 10")
cursor.fetchall()
print("\n‚è±Ô∏è Time without index:", time.time() - start)

# üß† Create index to optimize
cursor.execute("CREATE INDEX IF NOT EXISTS idx_price ON Invoice(UnitPrice)")

start = time.time()
cursor.execute("SELECT * FROM Invoice WHERE UnitPrice > 10")
cursor.fetchall()
print("‚è±Ô∏è Time with index:", time.time() - start)

# üîö Close connection
conn.close()
print("üîí Connection closed")

import pandas as pd

# üì• Load Invoice table from the database
conn = sqlite3.connect("e-commerce.db")
invoice_df = pd.read_sql_query("SELECT * FROM Invoice", conn)

# üíæ Save Invoice data to Excel
invoice_df.to_excel("invoice_data.xlsx", index=False)
print("‚úÖ Invoice data saved to 'invoice_data.xlsx'")

from google.colab import files

# Download the Excel file
files.download("invoice_data.xlsx")

"""# üî® 2. NoSQL Database
Five row is taked from e-commerce dataset and transformed into a document-oriented format using TinyDB, a local NoSQL database. Sample data is inserted to structure the dataset, and CRUD operations are performed using Python to manage the data effectively. Basic queries are executed to retrieve and manipulate the information, demonstrating the flexibility of NoSQL in handling unstructured data.
"""

# üìÅ Install TinyDB
!pip install tinydb

# üì• Import TinyDB
from tinydb import TinyDB, Query

# üîå Initialize TinyDB with the database file 'invoices.json'
db = TinyDB('invoices.json')
print("‚úÖ TinyDB database file 'invoices.json' is ready!")

# üíæ Transform five invoices data into document format and insert into TinyDB.
invoices = [
    {'InvoiceNo': '536389', 'StockCode': '22193', 'Description': 'RED DINER WALL CLOCK', 'Quantity': 2, 'InvoiceDate': '12/1/2010 10:03', 'UnitPrice': 8.5, 'CustomerID': 12431, 'Country': 'Australia'},
    {'InvoiceNo': '536370', 'StockCode': '22492', 'Description': 'MINI PAINT SET VINTAGE', 'Quantity': 36, 'InvoiceDate': '12/1/2010 8:45', 'UnitPrice': 0.65, 'CustomerID': 12583, 'Country': 'France'},
    {'InvoiceNo': '536390', 'StockCode': '20668', 'Description': 'DISCO BALL CHRISTMAS DECORATION', 'Quantity': 288, 'InvoiceDate': '12/1/2010 10:19', 'UnitPrice': 0.1, 'CustomerID': 17511, 'Country': 'United Kingdom'},
    {'InvoiceNo': '536365', 'StockCode': '84406B', 'Description': 'CREAM CUPID HEARTS COAT HANGER', 'Quantity': 8, 'InvoiceDate': '12/1/2010 8:26', 'UnitPrice': 2.75, 'CustomerID': 17850.0, 'Country': 'United Kingdom'},
    {'InvoiceNo': '536365', 'StockCode': '84029G', 'Description': 'KNITTED UNION FLAG HOT WATER BOTTLE', 'Quantity': 6, 'InvoiceDate': '12/1/2010 8:26', 'UnitPrice': 3.39, 'CustomerID': 17850.0, 'Country': 'United Kingdom'},
]

for invoice in invoices:
    db.insert(invoice)
print("‚úÖ Invoices data transformed into document and inserted into TinyDB!")

# üìÑ Print the inserted invoices from TinyDB (invoices.json)
for invoice in db.all():
    print(invoice)

# ‚ûï Insert new invoices into TinyDB - Multiple Invoices
db.insert_multiple([
    {'InvoiceNo': '99993', 'StockCode': 'T004', 'Description': 'product a', 'Quantity': 5, 'InvoiceDate': '10/1/2025 10:36', 'UnitPrice': 3.55, 'CustomerID': 9991, 'Country': 'Japan'},
    {'InvoiceNo': '99994', 'StockCode': 'T005', 'Description': 'product b', 'Quantity': 2, 'InvoiceDate': '13/05/2025 11:26', 'UnitPrice': 9, 'CustomerID': 9998, 'Country': 'Malaysia'},
    {'InvoiceNo': '99995', 'StockCode': 'T006', 'Description': 'product c', 'Quantity': 1, 'InvoiceDate': '4/05/2025 9:00', 'UnitPrice': 16.00, 'CustomerID': 996, 'Country': 'South Korea'}
])
print("‚úÖ Inserted multiple invoices!")

# üìä Query all Invoices
print("\nüìä All Invoices:")
for invoice in db.all():
    print(invoice)

# üìä Query invoices with Filters
invoices = Query()

print("\nüìÑ Invoices with Quantity > 10:")
for invoice in db.search(invoices.Quantity > 10):
    print(invoice)

print("\nüìÑ Invoices from United Kingdom:")
for invoice in db.search(invoices.Country == 'United Kingdom'):
    print(invoice)

print("\nüìÑ Invoices issued in 2025:")
for invoice in db.search(invoices.InvoiceDate.test(lambda d: '2025' in d)):
    print(invoice)

# ‚úèÔ∏è Update the Quantity for a specific Invoice
db.update({'Quantity': 3}, invoices.InvoiceNo == '99995')
print("\n‚úÖ Updated Quantity for InvoiceNo '99995'!")

# ‚ùå Delete a specific invoice
db.remove(invoices.Country == 'United Kingdom')
print("‚úÖ Deleted invoices from United Kingdom!")

# üìã Print all invoices currently in the database and count total number of invoices
print("\nüìÑ Remaining invoices after update and deletion:")
for invoice in db.all():
    print(invoice)

print("\nüìä Total number of invoices:", len(db))

"""# ‚ú® 3.Stream Processing

Five rows of invoice data from an e-commerce dataset are processed using PySpark, a distributed data processing engine. The data is manually created as a list of tuples and converted into a Spark DataFrame with clearly defined columns. Basic filtering is performed to extract invoices from the "United Kingdom." The filtered results are then written to a local directory in CSV format within the Colab environment. This workflow demonstrates PySpark's capabilities in handling structured data, performing distributed transformations, and exporting results efficiently for further analysis or storage.
"""

# ‚úÖ Install PySpark
!pip install -q pyspark

# ‚úÖ Start SparkSession
from pyspark.sql import SparkSession

spark = SparkSession.builder.appName("InvoiceStream").getOrCreate()

# Test it works
spark.range(5).show()

# Simulate invoice records
invoicesData = [
    ('536389', '22193', 'RED DINER WALL CLOCK', 2, '12/1/2010 10:03', 8.5, 12431, 'Australia'),
    ('536370', '22492', 'MINI PAINT SET VINTAGE', 36, '12/1/2010 8:45', 0.65, 12583, 'France'),
    ('536390', '20668', 'DISCO BALL CHRISTMAS DECORATION', 288, '12/1/2010 10:19', 0.1, 17511, 'United Kingdom'),
    ('536365', '84406B', 'CREAM CUPID HEARTS COAT HANGER', 8, '12/1/2010 8:26', 2.75, 17850, 'United Kingdom'),
    ('536365', '84029G', 'KNITTED UNION FLAG HOT WATER BOTTLE', 6, '12/1/2010 8:26', 3.39, 17850, 'United Kingdom')
]

columns = ["InvoiceNo", "StockCode", "Description", "Quantity","InvoiceDate","UnitPrice","CustomerID","Country"]

# Create DataFrame
df = spark.createDataFrame(invoicesData, columns)
df.show()

# Filter Invoices beasd on Country
filtered_df = df.filter(df["Country"] == "United Kingdom")
filtered_df.show()

# Save to local folder (inside Colab environment)
output_path = "/content/output_Invoice"
filtered_df.write.mode("overwrite").csv(output_path)

# Verify file was saved
import os
print("Files saved to:", os.listdir(output_path))